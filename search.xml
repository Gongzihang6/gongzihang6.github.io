<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Git</title>
      <link href="/2024/04/04/git/"/>
      <url>/2024/04/04/git/</url>
      
        <content type="html"><![CDATA[<p>Git is very good !</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2024/04/03/git-learning/"/>
      <url>/2024/04/03/git-learning/</url>
      
        <content type="html"><![CDATA[<p>title: {Git learning}<br>date: {2024-04-03 23:49:34}<br>tags: tags</p><p>categories: categories</p><p>123456</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2024/04/03/yolov5s-wang-luo-jie-gou/"/>
      <url>/2024/04/03/yolov5s-wang-luo-jie-gou/</url>
      
        <content type="html"><![CDATA[<h5 id="yolov5s-网络结构"><a href="#yolov5s-网络结构" class="headerlink" title="yolov5s 网络结构"></a>yolov5s 网络结构</h5><p>Parameter name: epoch    Parameter value:-1<br>Parameter name: best_fitness     Parameter value:[    0.65574]<br>Parameter name: training_results         Parameter value:None<br>Parameter name: model    Parameter value:Model(<br>  (model): Sequential(<br>    (0): Focus(<br>      (conv): Conv(<br>        (conv): Conv2d(12, 32, kernel_size&#x3D;(3, 3), stride&#x3D;(1, 1), padding&#x3D;(1, 1), bias&#x3D;False)<br>        (bn): BatchNorm2d(32, eps&#x3D;0.001, momentum&#x3D;0.03, affine&#x3D;True, track_running_stats&#x3D;True)<br>        (act): SiLU()<br>      )<br>    )<br>    (1): Conv(<br>      (conv): Conv2d(32, 64, kernel_size&#x3D;(3, 3), stride&#x3D;(2, 2), padding&#x3D;(1, 1), bias&#x3D;False)<br>      (bn): BatchNorm2d(64, eps&#x3D;0.001, momentum&#x3D;0.03, affine&#x3D;True, track_running_stats&#x3D;True)<br>      (act): SiLU()<br>    )<br>    (2): C3(<br>      (cv1): Conv(<br>        (conv): Conv2d(64, 32, kernel_size&#x3D;(1, 1), stride&#x3D;(1, 1), bias&#x3D;False)<br>        (bn): BatchNorm2d(32, eps&#x3D;0.001, momentum&#x3D;0.03, affine&#x3D;True, track_running_stats&#x3D;True)<br>        (act): SiLU()<br>      )<br>      (cv2): Conv(<br>        (conv): Conv2d(64, 32, kernel_size&#x3D;(1, 1), stride&#x3D;(1, 1), bias&#x3D;False)<br>        (bn): BatchNorm2d(32, eps&#x3D;0.001, momentum&#x3D;0.03, affine&#x3D;True, track_running_stats&#x3D;True)<br>        (act): SiLU()<br>      )<br>      (cv3): Conv(<br>        (conv): Conv2d(64, 64, kernel_size&#x3D;(1, 1), stride&#x3D;(1, 1), bias&#x3D;False)<br>        (bn): BatchNorm2d(64, eps&#x3D;0.001, momentum&#x3D;0.03, affine&#x3D;True, track_running_stats&#x3D;True)<br>        (act): SiLU()<br>      )<br>      (m): Sequential(<br>        (0): Bottleneck(<br>          (cv1): Conv(<br>            (conv): Conv2d(32, 32, kernel_size&#x3D;(1, 1), stride&#x3D;(1, 1), bias&#x3D;False)<br>            (bn): BatchNorm2d(32, eps&#x3D;0.001, momentum&#x3D;0.03, affine&#x3D;True, track_running_stats&#x3D;True)<br>            (act): SiLU()<br>          )<br>          (cv2): Conv(<br>            (conv): Conv2d(32, 32, kernel_size&#x3D;(3, 3), stride&#x3D;(1, 1), padding&#x3D;(1, 1), bias&#x3D;False)<br>            (bn): BatchNorm2d(32, eps&#x3D;0.001, momentum&#x3D;0.03, affine&#x3D;True, track_running_stats&#x3D;True)<br>            (act): SiLU()<br>          )<br>        )<br>      )<br>    )<br>    (3): Conv(<br>      (conv): Conv2d(64, 128, kernel_size&#x3D;(3, 3), stride&#x3D;(2, 2), padding&#x3D;(1, 1), bias&#x3D;False)<br>      (bn): BatchNorm2d(128, eps&#x3D;0.001, momentum&#x3D;0.03, affine&#x3D;True, track_running_stats&#x3D;True)<br>      (act): SiLU()<br>    )<br>    (4): C3(<br>      (cv1): Conv(<br>        (conv): Conv2d(128, 64, kernel_size&#x3D;(1, 1), stride&#x3D;(1, 1), bias&#x3D;False)<br>        (bn): BatchNorm2d(64, eps&#x3D;0.001, momentum&#x3D;0.03, affine&#x3D;True, track_running_stats&#x3D;True)<br>        (act): SiLU()<br>      )<br>      (cv2): Conv(<br>        (conv): Conv2d(128, 64, kernel_size&#x3D;(1, 1), stride&#x3D;(1, 1), bias&#x3D;False)<br>        (bn): BatchNorm2d(64, eps&#x3D;0.001, momentum&#x3D;0.03, affine&#x3D;True, track_running_stats&#x3D;True)<br>        (act): SiLU()<br>      )<br>      (cv3): Conv(<br>        (conv): Conv2d(128, 128, kernel_size&#x3D;(1, 1), stride&#x3D;(1, 1), bias&#x3D;False)<br>        (bn): BatchNorm2d(128, eps&#x3D;0.001, momentum&#x3D;0.03, affine&#x3D;True, track_running_stats&#x3D;True)<br>        (act): SiLU()<br>      )<br>      (m): Sequential(<br>        (0): Bottleneck(<br>          (cv1): Conv(<br>            (conv): Conv2d(64, 64, kernel_size&#x3D;(1, 1), stride&#x3D;(1, 1), bias&#x3D;False)<br>            (bn): BatchNorm2d(64, eps&#x3D;0.001, momentum&#x3D;0.03, affine&#x3D;True, track_running_stats&#x3D;True)<br>            (act): SiLU()<br>          )<br>          (cv2): Conv(<br>            (conv): Conv2d(64, 64, kernel_size&#x3D;(3, 3), stride&#x3D;(1, 1), padding&#x3D;(1, 1), bias&#x3D;False)<br>            (bn): BatchNorm2d(64, eps&#x3D;0.001, momentum&#x3D;0.03, affine&#x3D;True, track_running_stats&#x3D;True)<br>            (act): SiLU()<br>          )<br>        )<br>        (1): Bottleneck(<br>          (cv1): Conv(<br>            (conv): Conv2d(64, 64, kernel_size&#x3D;(1, 1), stride&#x3D;(1, 1), bias&#x3D;False)<br>            (bn): BatchNorm2d(64, eps&#x3D;0.001, momentum&#x3D;0.03, affine&#x3D;True, track_running_stats&#x3D;True)<br>            (act): SiLU()<br>          )<br>          (cv2): Conv(<br>            (conv): Conv2d(64, 64, kernel_size&#x3D;(3, 3), stride&#x3D;(1, 1), padding&#x3D;(1, 1), bias&#x3D;False)<br>            (bn): BatchNorm2d(64, eps&#x3D;0.001, momentum&#x3D;0.03, affine&#x3D;True, track_running_stats&#x3D;True)<br>            (act): SiLU()<br>          )<br>        )<br>        (2): Bottleneck(<br>          (cv1): Conv(<br>            (conv): Conv2d(64, 64, kernel_size&#x3D;(1, 1), stride&#x3D;(1, 1), bias&#x3D;False)<br>            (bn): BatchNorm2d(64, eps&#x3D;0.001, momentum&#x3D;0.03, affine&#x3D;True, track_running_stats&#x3D;True)<br>            (act): SiLU()<br>          )<br>          (cv2): Conv(<br>            (conv): Conv2d(64, 64, kernel_size&#x3D;(3, 3), stride&#x3D;(1, 1), padding&#x3D;(1, 1), bias&#x3D;False)<br>            (bn): BatchNorm2d(64, eps&#x3D;0.001, momentum&#x3D;0.03, affine&#x3D;True, track_running_stats&#x3D;True)<br>            (act): SiLU()<br>          )<br>        )<br>      )<br>    )<br>    (5): Conv(<br>      (conv): Conv2d(128, 256, kernel_size&#x3D;(3, 3), stride&#x3D;(2, 2), padding&#x3D;(1, 1), bias&#x3D;False)<br>      (bn): BatchNorm2d(256, eps&#x3D;0.001, momentum&#x3D;0.03, affine&#x3D;True, track_running_stats&#x3D;True)<br>      (act): SiLU()<br>    )<br>    (6): C3(<br>      (cv1): Conv(<br>        (conv): Conv2d(256, 128, kernel_size&#x3D;(1, 1), stride&#x3D;(1, 1), bias&#x3D;False)<br>        (bn): BatchNorm2d(128, eps&#x3D;0.001, momentum&#x3D;0.03, affine&#x3D;True, track_running_stats&#x3D;True)<br>        (act): SiLU()<br>      )<br>      (cv2): Conv(<br>        (conv): Conv2d(256, 128, kernel_size&#x3D;(1, 1), stride&#x3D;(1, 1), bias&#x3D;False)<br>        (bn): BatchNorm2d(128, eps&#x3D;0.001, momentum&#x3D;0.03, affine&#x3D;True, track_running_stats&#x3D;True)<br>        (act): SiLU()<br>      )<br>      (cv3): Conv(<br>        (conv): Conv2d(256, 256, kernel_size&#x3D;(1, 1), stride&#x3D;(1, 1), bias&#x3D;False)<br>        (bn): BatchNorm2d(256, eps&#x3D;0.001, momentum&#x3D;0.03, affine&#x3D;True, track_running_stats&#x3D;True)<br>        (act): SiLU()<br>      )<br>      (m): Sequential(<br>        (0): Bottleneck(<br>          (cv1): Conv(<br>            (conv): Conv2d(128, 128, kernel_size&#x3D;(1, 1), stride&#x3D;(1, 1), bias&#x3D;False)<br>            (bn): BatchNorm2d(128, eps&#x3D;0.001, momentum&#x3D;0.03, affine&#x3D;True, track_running_stats&#x3D;True)<br>            (act): SiLU()<br>          )<br>          (cv2): Conv(<br>            (conv): Conv2d(128, 128, kernel_size&#x3D;(3, 3), stride&#x3D;(1, 1), padding&#x3D;(1, 1), bias&#x3D;False)<br>            (bn): BatchNorm2d(128, eps&#x3D;0.001, momentum&#x3D;0.03, affine&#x3D;True, track_running_stats&#x3D;True)<br>            (act): SiLU()<br>          )<br>        )<br>        (1): Bottleneck(<br>          (cv1): Conv(<br>            (conv): Conv2d(128, 128, kernel_size&#x3D;(1, 1), stride&#x3D;(1, 1), bias&#x3D;False)<br>            (bn): BatchNorm2d(128, eps&#x3D;0.001, momentum&#x3D;0.03, affine&#x3D;True, track_running_stats&#x3D;True)<br>            (act): SiLU()<br>          )<br>          (cv2): Conv(<br>            (conv): Conv2d(128, 128, kernel_size&#x3D;(3, 3), stride&#x3D;(1, 1), padding&#x3D;(1, 1), bias&#x3D;False)<br>            (bn): BatchNorm2d(128, eps&#x3D;0.001, momentum&#x3D;0.03, affine&#x3D;True, track_running_stats&#x3D;True)<br>            (act): SiLU()<br>          )<br>        )<br>        (2): Bottleneck(<br>          (cv1): Conv(<br>            (conv): Conv2d(128, 128, kernel_size&#x3D;(1, 1), stride&#x3D;(1, 1), bias&#x3D;False)<br>            (bn): BatchNorm2d(128, eps&#x3D;0.001, momentum&#x3D;0.03, affine&#x3D;True, track_running_stats&#x3D;True)<br>            (act): SiLU()<br>          )<br>          (cv2): Conv(<br>            (conv): Conv2d(128, 128, kernel_size&#x3D;(3, 3), stride&#x3D;(1, 1), padding&#x3D;(1, 1), bias&#x3D;False)<br>            (bn): BatchNorm2d(128, eps&#x3D;0.001, momentum&#x3D;0.03, affine&#x3D;True, track_running_stats&#x3D;True)<br>            (act): SiLU()<br>          )<br>        )<br>      )<br>    )<br>    (7): Conv(<br>      (conv): Conv2d(256, 512, kernel_size&#x3D;(3, 3), stride&#x3D;(2, 2), padding&#x3D;(1, 1), bias&#x3D;False)<br>      (bn): BatchNorm2d(512, eps&#x3D;0.001, momentum&#x3D;0.03, affine&#x3D;True, track_running_stats&#x3D;True)<br>      (act): SiLU()<br>    )<br>    (8): SPP(<br>      (cv1): Conv(<br>        (conv): Conv2d(512, 256, kernel_size&#x3D;(1, 1), stride&#x3D;(1, 1), bias&#x3D;False)<br>        (bn): BatchNorm2d(256, eps&#x3D;0.001, momentum&#x3D;0.03, affine&#x3D;True, track_running_stats&#x3D;True)<br>        (act): SiLU()<br>      )<br>      (cv2): Conv(<br>        (conv): Conv2d(1024, 512, kernel_size&#x3D;(1, 1), stride&#x3D;(1, 1), bias&#x3D;False)<br>        (bn): BatchNorm2d(512, eps&#x3D;0.001, momentum&#x3D;0.03, affine&#x3D;True, track_running_stats&#x3D;True)<br>        (act): SiLU()<br>      )<br>      (m): ModuleList(<br>        (0): MaxPool2d(kernel_size&#x3D;5, stride&#x3D;1, padding&#x3D;2, dilation&#x3D;1, ceil_mode&#x3D;False)<br>        (1): MaxPool2d(kernel_size&#x3D;9, stride&#x3D;1, padding&#x3D;4, dilation&#x3D;1, ceil_mode&#x3D;False)<br>        (2): MaxPool2d(kernel_size&#x3D;13, stride&#x3D;1, padding&#x3D;6, dilation&#x3D;1, ceil_mode&#x3D;False)<br>      )<br>    )<br>    (9): C3(<br>      (cv1): Conv(<br>        (conv): Conv2d(512, 256, kernel_size&#x3D;(1, 1), stride&#x3D;(1, 1), bias&#x3D;False)<br>        (bn): BatchNorm2d(256, eps&#x3D;0.001, momentum&#x3D;0.03, affine&#x3D;True, track_running_stats&#x3D;True)<br>        (act): SiLU()<br>      )<br>      (cv2): Conv(<br>        (conv): Conv2d(512, 256, kernel_size&#x3D;(1, 1), stride&#x3D;(1, 1), bias&#x3D;False)<br>        (bn): BatchNorm2d(256, eps&#x3D;0.001, momentum&#x3D;0.03, affine&#x3D;True, track_running_stats&#x3D;True)<br>        (act): SiLU()<br>      )<br>      (cv3): Conv(<br>        (conv): Conv2d(512, 512, kernel_size&#x3D;(1, 1), stride&#x3D;(1, 1), bias&#x3D;False)<br>        (bn): BatchNorm2d(512, eps&#x3D;0.001, momentum&#x3D;0.03, affine&#x3D;True, track_running_stats&#x3D;True)<br>        (act): SiLU()<br>      )<br>      (m): Sequential(<br>        (0): Bottleneck(<br>          (cv1): Conv(<br>            (conv): Conv2d(256, 256, kernel_size&#x3D;(1, 1), stride&#x3D;(1, 1), bias&#x3D;False)<br>            (bn): BatchNorm2d(256, eps&#x3D;0.001, momentum&#x3D;0.03, affine&#x3D;True, track_running_stats&#x3D;True)<br>            (act): SiLU()<br>          )<br>          (cv2): Conv(<br>            (conv): Conv2d(256, 256, kernel_size&#x3D;(3, 3), stride&#x3D;(1, 1), padding&#x3D;(1, 1), bias&#x3D;False)<br>            (bn): BatchNorm2d(256, eps&#x3D;0.001, momentum&#x3D;0.03, affine&#x3D;True, track_running_stats&#x3D;True)<br>            (act): SiLU()<br>          )<br>        )<br>      )<br>    )<br>    (10): Conv(<br>      (conv): Conv2d(512, 256, kernel_size&#x3D;(1, 1), stride&#x3D;(1, 1), bias&#x3D;False)<br>      (bn): BatchNorm2d(256, eps&#x3D;0.001, momentum&#x3D;0.03, affine&#x3D;True, track_running_stats&#x3D;True)<br>      (act): SiLU()<br>    )<br>    (11): Upsample(scale_factor&#x3D;2.0, mode&#x3D;’nearest’)<br>    (12): Concat()<br>    (13): C3(<br>      (cv1): Conv(<br>        (conv): Conv2d(512, 128, kernel_size&#x3D;(1, 1), stride&#x3D;(1, 1), bias&#x3D;False)<br>        (bn): BatchNorm2d(128, eps&#x3D;0.001, momentum&#x3D;0.03, affine&#x3D;True, track_running_stats&#x3D;True)<br>        (act): SiLU()<br>      )<br>      (cv2): Conv(<br>        (conv): Conv2d(512, 128, kernel_size&#x3D;(1, 1), stride&#x3D;(1, 1), bias&#x3D;False)<br>        (bn): BatchNorm2d(128, eps&#x3D;0.001, momentum&#x3D;0.03, affine&#x3D;True, track_running_stats&#x3D;True)<br>        (act): SiLU()<br>      )<br>      (cv3): Conv(<br>        (conv): Conv2d(256, 256, kernel_size&#x3D;(1, 1), stride&#x3D;(1, 1), bias&#x3D;False)<br>        (bn): BatchNorm2d(256, eps&#x3D;0.001, momentum&#x3D;0.03, affine&#x3D;True, track_running_stats&#x3D;True)<br>        (act): SiLU()<br>      )<br>      (m): Sequential(<br>        (0): Bottleneck(<br>          (cv1): Conv(<br>            (conv): Conv2d(128, 128, kernel_size&#x3D;(1, 1), stride&#x3D;(1, 1), bias&#x3D;False)<br>            (bn): BatchNorm2d(128, eps&#x3D;0.001, momentum&#x3D;0.03, affine&#x3D;True, track_running_stats&#x3D;True)<br>            (act): SiLU()<br>          )<br>          (cv2): Conv(<br>            (conv): Conv2d(128, 128, kernel_size&#x3D;(3, 3), stride&#x3D;(1, 1), padding&#x3D;(1, 1), bias&#x3D;False)<br>            (bn): BatchNorm2d(128, eps&#x3D;0.001, momentum&#x3D;0.03, affine&#x3D;True, track_running_stats&#x3D;True)<br>            (act): SiLU()<br>          )<br>        )<br>      )<br>    )<br>    (14): Conv(<br>      (conv): Conv2d(256, 128, kernel_size&#x3D;(1, 1), stride&#x3D;(1, 1), bias&#x3D;False)<br>      (bn): BatchNorm2d(128, eps&#x3D;0.001, momentum&#x3D;0.03, affine&#x3D;True, track_running_stats&#x3D;True)<br>      (act): SiLU()<br>    )<br>    (15): Upsample(scale_factor&#x3D;2.0, mode&#x3D;’nearest’)<br>    (16): Concat()<br>    (17): C3(<br>      (cv1): Conv(<br>        (conv): Conv2d(256, 64, kernel_size&#x3D;(1, 1), stride&#x3D;(1, 1), bias&#x3D;False)<br>        (bn): BatchNorm2d(64, eps&#x3D;0.001, momentum&#x3D;0.03, affine&#x3D;True, track_running_stats&#x3D;True)<br>        (act): SiLU()<br>      )<br>      (cv2): Conv(<br>        (conv): Conv2d(256, 64, kernel_size&#x3D;(1, 1), stride&#x3D;(1, 1), bias&#x3D;False)<br>        (bn): BatchNorm2d(64, eps&#x3D;0.001, momentum&#x3D;0.03, affine&#x3D;True, track_running_stats&#x3D;True)<br>        (act): SiLU()<br>      )<br>      (cv3): Conv(<br>        (conv): Conv2d(128, 128, kernel_size&#x3D;(1, 1), stride&#x3D;(1, 1), bias&#x3D;False)<br>        (bn): BatchNorm2d(128, eps&#x3D;0.001, momentum&#x3D;0.03, affine&#x3D;True, track_running_stats&#x3D;True)<br>        (act): SiLU()<br>      )<br>      (m): Sequential(<br>        (0): Bottleneck(<br>          (cv1): Conv(<br>            (conv): Conv2d(64, 64, kernel_size&#x3D;(1, 1), stride&#x3D;(1, 1), bias&#x3D;False)<br>            (bn): BatchNorm2d(64, eps&#x3D;0.001, momentum&#x3D;0.03, affine&#x3D;True, track_running_stats&#x3D;True)<br>            (act): SiLU()<br>          )<br>          (cv2): Conv(<br>            (conv): Conv2d(64, 64, kernel_size&#x3D;(3, 3), stride&#x3D;(1, 1), padding&#x3D;(1, 1), bias&#x3D;False)<br>            (bn): BatchNorm2d(64, eps&#x3D;0.001, momentum&#x3D;0.03, affine&#x3D;True, track_running_stats&#x3D;True)<br>            (act): SiLU()<br>          )<br>        )<br>      )<br>    )<br>    (18): Conv(<br>      (conv): Conv2d(128, 128, kernel_size&#x3D;(3, 3), stride&#x3D;(2, 2), padding&#x3D;(1, 1), bias&#x3D;False)<br>      (bn): BatchNorm2d(128, eps&#x3D;0.001, momentum&#x3D;0.03, affine&#x3D;True, track_running_stats&#x3D;True)<br>      (act): SiLU()<br>    )<br>    (19): Concat()<br>    (20): C3(<br>      (cv1): Conv(<br>        (conv): Conv2d(256, 128, kernel_size&#x3D;(1, 1), stride&#x3D;(1, 1), bias&#x3D;False)<br>        (bn): BatchNorm2d(128, eps&#x3D;0.001, momentum&#x3D;0.03, affine&#x3D;True, track_running_stats&#x3D;True)<br>        (act): SiLU()<br>      )<br>      (cv2): Conv(<br>        (conv): Conv2d(256, 128, kernel_size&#x3D;(1, 1), stride&#x3D;(1, 1), bias&#x3D;False)<br>        (bn): BatchNorm2d(128, eps&#x3D;0.001, momentum&#x3D;0.03, affine&#x3D;True, track_running_stats&#x3D;True)<br>        (act): SiLU()<br>      )<br>      (cv3): Conv(<br>        (conv): Conv2d(256, 256, kernel_size&#x3D;(1, 1), stride&#x3D;(1, 1), bias&#x3D;False)<br>        (bn): BatchNorm2d(256, eps&#x3D;0.001, momentum&#x3D;0.03, affine&#x3D;True, track_running_stats&#x3D;True)<br>        (act): SiLU()<br>      )<br>      (m): Sequential(<br>        (0): Bottleneck(<br>          (cv1): Conv(<br>            (conv): Conv2d(128, 128, kernel_size&#x3D;(1, 1), stride&#x3D;(1, 1), bias&#x3D;False)<br>            (bn): BatchNorm2d(128, eps&#x3D;0.001, momentum&#x3D;0.03, affine&#x3D;True, track_running_stats&#x3D;True)<br>            (act): SiLU()<br>          )<br>          (cv2): Conv(<br>            (conv): Conv2d(128, 128, kernel_size&#x3D;(3, 3), stride&#x3D;(1, 1), padding&#x3D;(1, 1), bias&#x3D;False)<br>            (bn): BatchNorm2d(128, eps&#x3D;0.001, momentum&#x3D;0.03, affine&#x3D;True, track_running_stats&#x3D;True)<br>            (act): SiLU()<br>          )<br>        )<br>      )<br>    )<br>    (21): Conv(<br>      (conv): Conv2d(256, 256, kernel_size&#x3D;(3, 3), stride&#x3D;(2, 2), padding&#x3D;(1, 1), bias&#x3D;False)<br>      (bn): BatchNorm2d(256, eps&#x3D;0.001, momentum&#x3D;0.03, affine&#x3D;True, track_running_stats&#x3D;True)<br>      (act): SiLU()<br>    )<br>    (22): Concat()<br>    (23): C3(<br>      (cv1): Conv(<br>        (conv): Conv2d(512, 256, kernel_size&#x3D;(1, 1), stride&#x3D;(1, 1), bias&#x3D;False)<br>        (bn): BatchNorm2d(256, eps&#x3D;0.001, momentum&#x3D;0.03, affine&#x3D;True, track_running_stats&#x3D;True)<br>        (act): SiLU()<br>      )<br>      (cv2): Conv(<br>        (conv): Conv2d(512, 256, kernel_size&#x3D;(1, 1), stride&#x3D;(1, 1), bias&#x3D;False)<br>        (bn): BatchNorm2d(256, eps&#x3D;0.001, momentum&#x3D;0.03, affine&#x3D;True, track_running_stats&#x3D;True)<br>        (act): SiLU()<br>      )<br>      (cv3): Conv(<br>        (conv): Conv2d(512, 512, kernel_size&#x3D;(1, 1), stride&#x3D;(1, 1), bias&#x3D;False)<br>        (bn): BatchNorm2d(512, eps&#x3D;0.001, momentum&#x3D;0.03, affine&#x3D;True, track_running_stats&#x3D;True)<br>        (act): SiLU()<br>      )<br>      (m): Sequential(<br>        (0): Bottleneck(<br>          (cv1): Conv(<br>            (conv): Conv2d(256, 256, kernel_size&#x3D;(1, 1), stride&#x3D;(1, 1), bias&#x3D;False)<br>            (bn): BatchNorm2d(256, eps&#x3D;0.001, momentum&#x3D;0.03, affine&#x3D;True, track_running_stats&#x3D;True)<br>            (act): SiLU()<br>          )<br>          (cv2): Conv(<br>            (conv): Conv2d(256, 256, kernel_size&#x3D;(3, 3), stride&#x3D;(1, 1), padding&#x3D;(1, 1), bias&#x3D;False)<br>            (bn): BatchNorm2d(256, eps&#x3D;0.001, momentum&#x3D;0.03, affine&#x3D;True, track_running_stats&#x3D;True)<br>            (act): SiLU()<br>          )<br>        )<br>      )<br>    )<br>    (24): Detect(<br>      (m): ModuleList(<br>        (0): Conv2d(128, 21, kernel_size&#x3D;(1, 1), stride&#x3D;(1, 1))<br>        (1): Conv2d(256, 21, kernel_size&#x3D;(1, 1), stride&#x3D;(1, 1))<br>        (2): Conv2d(512, 21, kernel_size&#x3D;(1, 1), stride&#x3D;(1, 1))<br>      )<br>    )<br>  )<br>)<br>Parameter name: ema      Parameter value:None<br>Parameter name: updates          Parameter value:None<br>Parameter name: optimizer        Parameter value:None<br>Parameter name: wandb_id         Parameter value:None</p><p>model.0.conv.conv.weight         torch.Size([32, 12, 3, 3])<br>model.0.conv.conv.bias   torch.Size([32])<br>model.1.conv.weight      torch.Size([64, 32, 3, 3])<br>model.1.conv.bias        torch.Size([64])<br>model.2.cv1.conv.weight          torch.Size([32, 64, 1, 1])<br>model.2.cv1.conv.bias    torch.Size([32])<br>model.2.cv2.conv.weight          torch.Size([32, 64, 1, 1])<br>model.2.cv2.conv.bias    torch.Size([32])<br>model.2.cv3.conv.weight          torch.Size([64, 64, 1, 1])<br>model.2.cv3.conv.bias    torch.Size([64])<br>model.2.m.0.cv1.conv.weight      torch.Size([32, 32, 1, 1])<br>model.2.m.0.cv1.conv.bias        torch.Size([32])<br>model.2.m.0.cv2.conv.weight      torch.Size([32, 32, 3, 3])<br>model.2.m.0.cv2.conv.bias        torch.Size([32])<br>model.3.conv.weight      torch.Size([128, 64, 3, 3])<br>model.3.conv.bias        torch.Size([128])<br>model.4.cv1.conv.weight          torch.Size([64, 128, 1, 1])<br>model.4.cv1.conv.bias    torch.Size([64])<br>model.4.cv2.conv.weight          torch.Size([64, 128, 1, 1])<br>model.4.cv2.conv.bias    torch.Size([64])<br>model.4.cv3.conv.weight          torch.Size([128, 128, 1, 1])<br>model.4.cv3.conv.bias    torch.Size([128])<br>model.4.m.0.cv1.conv.weight      torch.Size([64, 64, 1, 1])<br>model.4.m.0.cv1.conv.bias        torch.Size([64])<br>model.4.m.0.cv2.conv.weight      torch.Size([64, 64, 3, 3])<br>model.4.m.0.cv2.conv.bias        torch.Size([64])<br>model.4.m.1.cv1.conv.weight      torch.Size([64, 64, 1, 1])<br>model.4.m.1.cv1.conv.bias        torch.Size([64])<br>model.4.m.1.cv2.conv.weight      torch.Size([64, 64, 3, 3])<br>model.4.m.1.cv2.conv.bias        torch.Size([64])<br>model.4.m.2.cv1.conv.weight      torch.Size([64, 64, 1, 1])<br>model.4.m.2.cv1.conv.bias        torch.Size([64])<br>model.4.m.2.cv2.conv.weight      torch.Size([64, 64, 3, 3])<br>model.4.m.2.cv2.conv.bias        torch.Size([64])<br>model.5.conv.weight      torch.Size([256, 128, 3, 3])<br>model.5.conv.bias        torch.Size([256])<br>model.6.cv1.conv.weight          torch.Size([128, 256, 1, 1])<br>model.6.cv1.conv.bias    torch.Size([128])<br>model.6.cv2.conv.weight          torch.Size([128, 256, 1, 1])<br>model.6.cv2.conv.bias    torch.Size([128])<br>model.6.cv3.conv.weight          torch.Size([256, 256, 1, 1])<br>model.6.cv3.conv.bias    torch.Size([256])<br>model.6.m.0.cv1.conv.weight      torch.Size([128, 128, 1, 1])<br>model.6.m.0.cv1.conv.bias        torch.Size([128])<br>model.6.m.0.cv2.conv.weight      torch.Size([128, 128, 3, 3])<br>model.6.m.0.cv2.conv.bias        torch.Size([128])<br>model.6.m.1.cv1.conv.weight      torch.Size([128, 128, 1, 1])<br>model.6.m.1.cv1.conv.bias        torch.Size([128])<br>model.6.m.1.cv2.conv.weight      torch.Size([128, 128, 3, 3])<br>model.6.m.1.cv2.conv.bias        torch.Size([128])<br>model.6.m.2.cv1.conv.weight      torch.Size([128, 128, 1, 1])<br>model.6.m.2.cv1.conv.bias        torch.Size([128])<br>model.6.m.2.cv2.conv.weight      torch.Size([128, 128, 3, 3])<br>model.6.m.2.cv2.conv.bias        torch.Size([128])<br>model.7.conv.weight      torch.Size([512, 256, 3, 3])<br>model.7.conv.bias        torch.Size([512])<br>model.8.cv1.conv.weight          torch.Size([256, 512, 1, 1])<br>model.8.cv1.conv.bias    torch.Size([256])<br>model.8.cv2.conv.weight          torch.Size([512, 1024, 1, 1])<br>model.8.cv2.conv.bias    torch.Size([512])<br>model.9.cv1.conv.weight          torch.Size([256, 512, 1, 1])<br>model.9.cv1.conv.bias    torch.Size([256])<br>model.9.cv2.conv.weight          torch.Size([256, 512, 1, 1])<br>model.9.cv2.conv.bias    torch.Size([256])<br>model.9.cv3.conv.weight          torch.Size([512, 512, 1, 1])<br>model.9.cv3.conv.bias    torch.Size([512])<br>model.9.m.0.cv1.conv.weight      torch.Size([256, 256, 1, 1])<br>model.9.m.0.cv1.conv.bias        torch.Size([256])<br>model.9.m.0.cv2.conv.weight      torch.Size([256, 256, 3, 3])<br>model.9.m.0.cv2.conv.bias        torch.Size([256])<br>model.10.conv.weight     torch.Size([256, 512, 1, 1])<br>model.10.conv.bias       torch.Size([256])<br>model.13.cv1.conv.weight         torch.Size([128, 512, 1, 1])<br>model.13.cv1.conv.bias   torch.Size([128])<br>model.13.cv2.conv.weight         torch.Size([128, 512, 1, 1])<br>model.13.cv2.conv.bias   torch.Size([128])<br>model.13.cv3.conv.weight         torch.Size([256, 256, 1, 1])<br>model.13.cv3.conv.bias   torch.Size([256])<br>model.13.m.0.cv1.conv.weight     torch.Size([128, 128, 1, 1])<br>model.13.m.0.cv1.conv.bias       torch.Size([128])<br>model.13.m.0.cv2.conv.weight     torch.Size([128, 128, 3, 3])<br>model.13.m.0.cv2.conv.bias       torch.Size([128])<br>model.14.conv.weight     torch.Size([128, 256, 1, 1])<br>model.14.conv.bias       torch.Size([128])<br>model.17.cv1.conv.weight         torch.Size([64, 256, 1, 1])<br>model.17.cv1.conv.bias   torch.Size([64])<br>model.17.cv2.conv.weight         torch.Size([64, 256, 1, 1])<br>model.17.cv2.conv.bias   torch.Size([64])<br>model.17.cv3.conv.weight         torch.Size([128, 128, 1, 1])<br>model.17.cv3.conv.bias   torch.Size([128])<br>model.17.m.0.cv1.conv.weight     torch.Size([64, 64, 1, 1])<br>model.17.m.0.cv1.conv.bias       torch.Size([64])<br>model.17.m.0.cv2.conv.weight     torch.Size([64, 64, 3, 3])<br>model.17.m.0.cv2.conv.bias       torch.Size([64])<br>model.18.conv.weight     torch.Size([128, 128, 3, 3])<br>model.18.conv.bias       torch.Size([128])<br>model.20.cv1.conv.weight         torch.Size([128, 256, 1, 1])<br>model.20.cv1.conv.bias   torch.Size([128])<br>model.20.cv2.conv.weight         torch.Size([128, 256, 1, 1])<br>model.20.cv2.conv.bias   torch.Size([128])<br>model.20.cv3.conv.weight         torch.Size([256, 256, 1, 1])<br>model.20.cv3.conv.bias   torch.Size([256])<br>model.20.m.0.cv1.conv.weight     torch.Size([128, 128, 1, 1])<br>model.20.m.0.cv1.conv.bias       torch.Size([128])<br>model.20.m.0.cv2.conv.weight     torch.Size([128, 128, 3, 3])<br>model.20.m.0.cv2.conv.bias       torch.Size([128])<br>model.21.conv.weight     torch.Size([256, 256, 3, 3])<br>model.21.conv.bias       torch.Size([256])<br>model.23.cv1.conv.weight         torch.Size([256, 512, 1, 1])<br>model.23.cv1.conv.bias   torch.Size([256])<br>model.23.cv2.conv.weight         torch.Size([256, 512, 1, 1])<br>model.23.cv2.conv.bias   torch.Size([256])<br>model.23.cv3.conv.weight         torch.Size([512, 512, 1, 1])<br>model.23.cv3.conv.bias   torch.Size([512])<br>model.23.m.0.cv1.conv.weight     torch.Size([256, 256, 1, 1])<br>model.23.m.0.cv1.conv.bias       torch.Size([256])<br>model.23.m.0.cv2.conv.weight     torch.Size([256, 256, 3, 3])<br>model.23.m.0.cv2.conv.bias       torch.Size([256])<br>model.24.m.0.weight      torch.Size([21, 128, 1, 1])<br>model.24.m.0.bias        torch.Size([21])<br>model.24.m.1.weight      torch.Size([21, 256, 1, 1])<br>model.24.m.1.bias        torch.Size([21])<br>model.24.m.2.weight      torch.Size([21, 512, 1, 1])<br>model.24.m.2.bias        torch.Size([21])</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2024/04/03/hello-world/"/>
      <url>/2024/04/03/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
